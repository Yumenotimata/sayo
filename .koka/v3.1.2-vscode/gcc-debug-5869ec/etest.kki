module interface etest
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/core/list = std/core/list = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// fun append
// ```
pub recursive effect type test[6,1,6,15] <(e :: E),(e1 :: E),a> :: (E, E, V) -> V {
  pub con @Hnd-test[6,1,6,15](@cfc: std/core/types/int, @fun-append: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>){0,2,8} : forall<(e :: E),(e1 :: E),a> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) -> (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>;
};

// Operations:
// ```koka
// fun test-case-append
// ```
pub recursive effect type test-case[9,1,9,20] <(e :: E),(e1 :: E),a> :: (E, E, V) -> V {
  pub con @Hnd-test-case[9,1,9,20](@cfc: std/core/types/int, @fun-test-case-append: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>){0,2,8} : forall<(e :: E),(e1 :: E),a> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) -> (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test` type.
 fun test/@cfc[6,1,6,15] : forall<(e :: E),(e1 :: E),a> (^ test : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-append` constructor field of the `:test` type.
 fun test/@fun-append[7,7,7,33] : forall<(e :: E),(e1 :: E),a> (^ test : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test-case` type.
 fun test-case/@cfc[9,1,9,20] : forall<(e :: E),(e1 :: E),a> (^ @this : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-case-append` constructor field of the `:test-case` type.
 fun test-case/@fun-test-case-append[10,7,10,43] : forall<(e :: E),(e1 :: E),a> (^ @this : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>;
// runtime tag for the effect `:test`
pub val @tag-test[6,1,6,15] : forall<(e :: E)> (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test :: (E, E, V) -> V)<(e :: E)>>;
// handler for the effect `:test`
pub  fun @handle-test[6,12,6,15] : forall<(e :: E),a,(e1 :: E),b> (hnd : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),b>, ret : (res : a) -> (e1 :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>|(e1 :: E)> a) -> (e1 :: E) b;
// select `append` operation out of effect `:test`
pub  fun @select-append[7,7,7,33] : forall<(e :: E),(e1 :: E),a> (^ hnd : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>;
// Call the `fun append` operation of the effect `:test`
pub  fun append[7,7,7,12] : forall<(e :: E)> (f : () -> (e :: E) std/core/types/bool) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> ();
// runtime tag for the effect `:test-case`
pub val @tag-test-case[9,1,9,20] : forall<(e :: E)> (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test-case :: (E, E, V) -> V)<(e :: E)>>;
// handler for the effect `:test-case`
pub  fun @handle-test-case[9,12,9,20] : forall<(e :: E),a,(e1 :: E),b> (hnd : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),b>, ret : (res : a) -> (e1 :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>|(e1 :: E)> a) -> (e1 :: E) b;
// select `test-case-append` operation out of effect `:test-case`
pub  fun @select-test-case-append[10,7,10,43] : forall<(e :: E),(e1 :: E),a> (^ hnd : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>;
// Call the `fun test-case-append` operation of the effect `:test-case`
pub  fun test-case-append[10,7,10,22] : forall<(e :: E)> (f : () -> (e :: E) std/core/types/bool) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>> ();
// monadic lift
 fun @mlift-assert-eq@10016[1,0,1,0] : forall<a,(e :: E)> (@y-x10006 : a, ?(==) : (a, a) -> std/core/types/bool, @y-x10007 : a) -> (e :: E) std/core/types/bool;
// monadic lift
 fun @mlift-assert-eq@10017[1,0,1,0] : forall<a,(e :: E)> (g : () -> (e :: E) a, ?(==) : (a, a) -> std/core/types/bool, @y-x10006 : a) -> (e :: E) std/core/types/bool;
pub  fun assert-eq[12,9,12,17] : forall<a,(e :: E)> (f : () -> (e :: E) a, g : () -> (e :: E) a, ?(==) : (a, a) -> std/core/types/bool) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> ();
pub  fun test[15,9,15,12] : forall<(e :: E)> (name : std/core/types/string, tests : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> ()) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>> ();
// monadic lift
 fun @mlift-run-test@10018[1,0,1,0] : forall<(e :: E)> (@y-x10011 : std/core/types/bool) -> <(std/core/console/console :: X)|(e :: E)> ();
pub  fun run-test[20,9,20,16] : forall<(e :: E)> (cases : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<<(std/core/console/console :: X)|(e :: E)>>>> ()) -> <(std/core/console/console :: X)|(e :: E)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun test/@cfc // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(test@0: (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (test@0) {
      ((@skip etest/@Hnd-test((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test/@fun-append // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(test@0: (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (test@0) {
      ((@skip etest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test-case/@cfc // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(@this: (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (@this) {
      ((@skip etest/@Hnd-test-case((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test-case/@fun-test-case-append // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(@this: (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (@this) {
      ((@skip etest/@Hnd-test-case((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-append // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(hnd: (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (hnd) {
      ((@skip etest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@fun-append: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @fun-append;
    });
  };
inline  fun append // inline size: 5
  = forall<(e :: E)> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>>(f: () -> (e :: E) std/core/types/bool){
    std/core/hnd/@perform1<() -> (e :: E) std/core/types/bool,(),(test :: (E, E, V) -> V)<(e :: E)>,<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (E, E, V) -> V)<(e :: E)>>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (E, E, V) -> V)<(e :: E)>>>((std/core/hnd/@evv-at<(test :: (E, E, V) -> V)<(e :: E)>>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e1 :: E),a> etest/@select-append<(e :: E),(e1 :: E),a>), f);
  };
inline borrow "^"  fun @select-test-case-append // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(hnd: (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (hnd) {
      ((@skip etest/@Hnd-test-case((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-case-append: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) : (test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test-case :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @fun-test-case-append;
    });
  };
inline  fun test-case-append // inline size: 5
  = forall<(e :: E)> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>>>(f: () -> (e :: E) std/core/types/bool){
    std/core/hnd/@perform1<() -> (e :: E) std/core/types/bool,(),(test-case :: (E, E, V) -> V)<(e :: E)>,<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-case :: (E, E, V) -> V)<(e :: E)>>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-case :: (E, E, V) -> V)<(e :: E)>>>((std/core/hnd/@evv-at<(test-case :: (E, E, V) -> V)<(e :: E)>>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, E, V) -> V)<(e :: E)>>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e1 :: E),a> etest/@select-test-case-append<(e :: E),(e1 :: E),a>), f);
  };