module interface utest
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// fun test-fail
// ```
pub recursive effect type test[3,1,3,15] <(e :: E),a> :: (E, V) -> V {
  pub con @Hnd-test[3,1,3,15](@cfc: std/core/types/int, @fun-test-fail: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) -> (test :: (E, V) -> V)<(e :: E),a>;
};

// Operations:
// ```koka
// fun test-case-fail
// ```
pub recursive effect type test-case[6,1,6,20] <(e :: E),a> :: (E, V) -> V {
  pub con @Hnd-test-case[6,1,6,20](@cfc: std/core/types/int, @fun-test-case-fail: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) -> (test-case :: (E, V) -> V)<(e :: E),a>;
};

// Operations:
// ```koka
// fun test-suite-fail
// ```
pub recursive effect type test-suite[9,1,9,21] <(e :: E),a> :: (E, V) -> V {
  pub con @Hnd-test-suite[9,1,9,21](@cfc: std/core/types/int, @fun-test-suite-fail: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) -> (test-suite :: (E, V) -> V)<(e :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test` type.
 fun test/@cfc[3,1,3,15] : forall<(e :: E),a> (^ test : (test :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-fail` constructor field of the `:test` type.
 fun test/@fun-test-fail[4,7,4,53] : forall<(e :: E),a> (^ test : (test :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test-case` type.
 fun test-case/@cfc[6,1,6,20] : forall<(e :: E),a> (^ @this : (test-case :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-case-fail` constructor field of the `:test-case` type.
 fun test-case/@fun-test-case-fail[7,7,7,58] : forall<(e :: E),a> (^ @this : (test-case :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test-suite` type.
 fun test-suite/@cfc[9,1,9,21] : forall<(e :: E),a> (^ @this : (test-suite :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-suite-fail` constructor field of the `:test-suite` type.
 fun test-suite/@fun-test-suite-fail[10,7,10,79] : forall<(e :: E),a> (^ @this : (test-suite :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:test`
pub val @tag-test[3,1,3,15] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test :: (E, V) -> V)>;
// handler for the effect `:test`
pub  fun @handle-test[3,12,3,15] : forall<a,(e :: E),b> (hnd : (test :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `test-fail` operation out of effect `:test`
pub  fun @select-test-fail[4,7,4,53] : forall<(e :: E),a> (^ hnd : (test :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>;
// Call the `fun test-fail` operation of the effect `:test`
pub  fun test-fail[4,7,4,15] : (expected : std/core/types/string, actual : std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>> ();
// runtime tag for the effect `:test-case`
pub val @tag-test-case[6,1,6,20] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test-case :: (E, V) -> V)>;
// handler for the effect `:test-case`
pub  fun @handle-test-case[6,12,6,20] : forall<a,(e :: E),b> (hnd : (test-case :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `test-case-fail` operation out of effect `:test-case`
pub  fun @select-test-case-fail[7,7,7,58] : forall<(e :: E),a> (^ hnd : (test-case :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>;
// Call the `fun test-case-fail` operation of the effect `:test-case`
pub  fun test-case-fail[7,7,7,20] : (expected : std/core/types/string, actual : std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>> ();
// runtime tag for the effect `:test-suite`
pub val @tag-test-suite[9,1,9,21] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test-suite :: (E, V) -> V)>;
// handler for the effect `:test-suite`
pub  fun @handle-test-suite[9,12,9,21] : forall<a,(e :: E),b> (hnd : (test-suite :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `test-suite-fail` operation out of effect `:test-suite`
pub  fun @select-test-suite-fail[10,7,10,79] : forall<(e :: E),a> (^ hnd : (test-suite :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>;
// Call the `fun test-suite-fail` operation of the effect `:test-suite`
pub  fun test-suite-fail[10,7,10,21] : (suite-name : std/core/types/string, expected : std/core/types/string, actual : std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>> ();
pub  fun assert-eq[12,9,12,17] : forall<a> (expected : a, actual : a, ?(==) : (a, a) -> std/core/types/bool, ?show : (a) -> std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>> ();
pub  fun test[18,9,18,12] : (test-name : std/core/types/string, tests : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>> ()) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>> ();
pub  fun suite[23,9,23,13] : (suite-name : std/core/types/string, cases : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>> ()) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>> ();
pub  fun run-test[28,9,28,16] : (suites : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>> ()) -> <(std/core/console/console :: X)> (std/core/types/list :: V -> V)<()>;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun test/@cfc // inline size: 0
  = forall<(e :: E),a> fn(test@0: (test :: (E, V) -> V)<(e :: E),a>){
    (match (test@0) {
      ((@skip utest/@Hnd-test((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) : (test :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test/@fun-test-fail // inline size: 0
  = forall<(e :: E),a> fn(test@0: (test :: (E, V) -> V)<(e :: E),a>){
    (match (test@0) {
      ((@skip utest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) : (test :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test-case/@cfc // inline size: 0
  = forall<(e :: E),a> fn(@this: (test-case :: (E, V) -> V)<(e :: E),a>){
    (match (@this) {
      ((@skip utest/@Hnd-test-case((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) : (test-case :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test-case :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test-case/@fun-test-case-fail // inline size: 0
  = forall<(e :: E),a> fn(@this: (test-case :: (E, V) -> V)<(e :: E),a>){
    (match (@this) {
      ((@skip utest/@Hnd-test-case((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) : (test-case :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test-case :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test-suite/@cfc // inline size: 0
  = forall<(e :: E),a> fn(@this: (test-suite :: (E, V) -> V)<(e :: E),a>){
    (match (@this) {
      ((@skip utest/@Hnd-test-suite((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) : (test-suite :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test-suite :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test-suite/@fun-test-suite-fail // inline size: 0
  = forall<(e :: E),a> fn(@this: (test-suite :: (E, V) -> V)<(e :: E),a>){
    (match (@this) {
      ((@skip utest/@Hnd-test-suite((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) : (test-suite :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test-suite :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-test-fail // inline size: 0
  = forall<(e :: E),a> fn(hnd: (test :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip utest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-fail: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (E, V) -> V),(e :: E),a>) : (test :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test :: (E, V) -> V)<(e :: E),a>))
         -> @fun-test-fail;
    });
  };
inline  fun test-fail // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>>>(expected: std/core/types/string, actual: std/core/types/string){
    std/core/hnd/@perform2<std/core/types/string,std/core/types/string,(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>>,(test :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (E, V) -> V)>>((std/core/hnd/@evv-at<(test :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), utest/@select-test-fail, expected, actual);
  };
inline borrow "^"  fun @select-test-case-fail // inline size: 0
  = forall<(e :: E),a> fn(hnd: (test-case :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip utest/@Hnd-test-case((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-case-fail: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test-case :: (E, V) -> V),(e :: E),a>) : (test-case :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test-case :: (E, V) -> V)<(e :: E),a>))
         -> @fun-test-case-fail;
    });
  };
inline  fun test-case-fail // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>>>(expected: std/core/types/string, actual: std/core/types/string){
    std/core/hnd/@perform2<std/core/types/string,std/core/types/string,(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>>,(test-case :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-case :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-case :: (E, V) -> V)>>((std/core/hnd/@evv-at<(test-case :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), utest/@select-test-case-fail, expected, actual);
  };
inline borrow "^"  fun @select-test-suite-fail // inline size: 0
  = forall<(e :: E),a> fn(hnd: (test-suite :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip utest/@Hnd-test-suite((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-suite-fail: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (E, V) -> V),(e :: E),a>) : (test-suite :: (E, V) -> V)<(e :: E),a> ) as @pat: ((test-suite :: (E, V) -> V)<(e :: E),a>))
         -> @fun-test-suite-fail;
    });
  };
inline  fun test-suite-fail // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>>>(suite-name: std/core/types/string, expected: std/core/types/string, actual: std/core/types/string){
    std/core/hnd/@perform3<std/core/types/string,std/core/types/string,std/core/types/string,(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>>,(test-suite :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-suite :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-suite :: (E, V) -> V)>>((std/core/hnd/@evv-at<(test-suite :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), utest/@select-test-suite-fail, suite-name, expected, actual);
  };