module interface value
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
pub rec type value[3,1,5,19] {
  pub con Int[4,3,4,5](x: std/core/types/int){0,1,8} : (x : std/core/types/int) -> value;
  pub con String[5,3,5,8](x: std/core/types/string){0,1,8} : (x : std/core/types/string) -> value;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Tests for the `Int` constructor of the `:value` type.
pub fip fun is-int[4,3,4,5] : (^ value : value) -> std/core/types/bool;
// Automatically generated. Tests for the `String` constructor of the `:value` type.
pub fip fun is-string[5,3,5,8] : (^ value : value) -> std/core/types/bool;
pub  fun show[7,9,7,12] : (v : value) -> <(std/core/types/div :: X)> std/core/types/string;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^" fip fun is-int // inline size: 1
  = fn(value: value){
    match (value) {
      ((value/Int((@pat@0: std/core/types/int) : std/core/types/int) : value ) as @pat: value)
         -> std/core/types/True;
      ((@skip value/String((@pat@2: std/core/types/string) : std/core/types/string) : value ) as @pat@1: value)
         -> std/core/types/False;
    };
  };
inline borrow "^" fip fun is-string // inline size: 1
  = fn(value: value){
    match (value) {
      ((value/String((@pat@0: std/core/types/string) : std/core/types/string) : value ) as @pat: value)
         -> std/core/types/True;
      ((@skip value/Int((@pat@2: std/core/types/int) : std/core/types/int) : value ) as @pat@1: value)
         -> std/core/types/False;
    };
  };
 fun show // inline size: 2
  = fn<<(std/core/types/div :: X)>>(v: value){
    match (v) {
      ((value/Int((x: std/core/types/int) : std/core/types/int) : value ) as @pat: value)
         -> std/core/int/show(x);
      ((@skip value/String((x@0: std/core/types/string) : std/core/types/string) : value ) as @pat@0: value)
         -> x@0;
    };
  };