module interface utest
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/core/list = std/core/list = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// fun test-fail
// ```
pub recursive effect type test[10,1,10,15] <a,(e :: E),b> :: (V, E, V) -> V {
  pub con @Hnd-test[10,1,10,15](@cfc: std/core/types/int, @fun-test-fail: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>){0,2,8} : forall<a,(e :: E),b> (std/core/types/int, (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) -> (test :: (V, E, V) -> V)<a,(e :: E),b>;
};
type test-case-t[5,1,8,16] {
  con Test-case-t[5,8,5,18](name: std/core/types/string, expected: std/core/types/string, actual: std/core/types/string){0,3,8} : (name : std/core/types/string, expected : std/core/types/string, actual : std/core/types/string) -> test-case-t;
};

// Operations:
// ```koka
// fun test-case-fail
// ```
pub recursive effect type test-case[13,1,13,20] <a,(e :: E),b> :: (V, E, V) -> V {
  pub con @Hnd-test-case[13,1,13,20](@cfc: std/core/types/int, @fun-test-case-fail: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>){0,2,8} : forall<a,(e :: E),b> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) -> (test-case :: (V, E, V) -> V)<a,(e :: E),b>;
};
pub type test-failure[19,1,20,56] <a,b> :: (V, V) -> V {
  pub con TestFailure[20,3,20,13](expected: a, actual: b, msg: std/core/types/string){0,3,8} : forall<a,b> (expected : a, actual : b, msg : std/core/types/string) -> (test-failure :: (V, V) -> V)<a,b>;
};

// Operations:
// ```koka
// fun test-suite-fail
// ```
pub recursive effect type test-suite[16,1,16,21] <a,(e :: E),b> :: (V, E, V) -> V {
  pub con @Hnd-test-suite[16,1,16,21](@cfc: std/core/types/int, @fun-test-suite-fail: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>){0,2,8} : forall<a,(e :: E),b> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) -> (test-suite :: (V, E, V) -> V)<a,(e :: E),b>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test` type.
 fun test/@cfc[10,1,10,15] : forall<a,(e :: E),b> (^ test : (test :: (V, E, V) -> V)<a,(e :: E),b>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-fail` constructor field of the `:test` type.
 fun test/@fun-test-fail[11,7,11,56] : forall<a,(e :: E),b> (^ test : (test :: (V, E, V) -> V)<a,(e :: E),b>) -> (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>;
// Automatically generated. Retrieves the `name` constructor field of the `:test-case-t` type.
 fun test-case-t/name[6,3,6,6] : (^ @this : test-case-t) -> std/core/types/string;
// Automatically generated. Retrieves the `expected` constructor field of the `:test-case-t` type.
 fun test-case-t/expected[7,3,7,10] : (^ @this : test-case-t) -> std/core/types/string;
// Automatically generated. Retrieves the `actual` constructor field of the `:test-case-t` type.
 fun test-case-t/actual[8,3,8,8] : (^ @this : test-case-t) -> std/core/types/string;
 fun test-case-t/@copy[5,8,5,18] : (@this : test-case-t, name : (std/core/types/@optional :: V -> V)<std/core/types/string>, expected : (std/core/types/@optional :: V -> V)<std/core/types/string>, actual : (std/core/types/@optional :: V -> V)<std/core/types/string>) -> test-case-t;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test-case` type.
 fun test-case/@cfc[13,1,13,20] : forall<a,(e :: E),b> (^ @this : (test-case :: (V, E, V) -> V)<a,(e :: E),b>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-case-fail` constructor field of the `:test-case` type.
 fun test-case/@fun-test-case-fail[14,7,14,49] : forall<a,(e :: E),b> (^ @this : (test-case :: (V, E, V) -> V)<a,(e :: E),b>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>;
// Automatically generated. Retrieves the `expected` constructor field of the `:test-failure` type.
pub  fun test-failure/expected[20,17,20,24] : forall<a,b> (^ @this : (test-failure :: (V, V) -> V)<a,b>) -> a;
// Automatically generated. Retrieves the `actual` constructor field of the `:test-failure` type.
pub  fun test-failure/actual[20,31,20,36] : forall<a,b> (^ @this : (test-failure :: (V, V) -> V)<a,b>) -> b;
// Automatically generated. Retrieves the `msg` constructor field of the `:test-failure` type.
pub  fun test-failure/msg[20,43,20,45] : forall<a,b> (^ @this : (test-failure :: (V, V) -> V)<a,b>) -> std/core/types/string;
pub  fun test-failure/@copy[20,3,20,13] : forall<a,b> (@this : (test-failure :: (V, V) -> V)<a,b>, expected : (std/core/types/@optional :: V -> V)<a>, actual : (std/core/types/@optional :: V -> V)<b>, msg : (std/core/types/@optional :: V -> V)<std/core/types/string>) -> (test-failure :: (V, V) -> V)<a,b>;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test-suite` type.
 fun test-suite/@cfc[16,1,16,21] : forall<a,(e :: E),b> (^ @this : (test-suite :: (V, E, V) -> V)<a,(e :: E),b>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-suite-fail` constructor field of the `:test-suite` type.
 fun test-suite/@fun-test-suite-fail[17,7,17,83] : forall<a,(e :: E),b> (^ @this : (test-suite :: (V, E, V) -> V)<a,(e :: E),b>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>;
// runtime tag for the effect `:test`
pub val @tag-test[10,1,10,15] : forall<a> (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test :: (V, E, V) -> V)<a>>;
// handler for the effect `:test`
pub  fun @handle-test[10,12,10,15] : forall<a,b,(e :: E),c> (hnd : (test :: (V, E, V) -> V)<a,(e :: E),c>, ret : (res : b) -> (e :: E) c, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>|(e :: E)> b) -> (e :: E) c;
// select `test-fail` operation out of effect `:test`
pub  fun @select-test-fail[11,7,11,56] : forall<a,(e :: E),b> (^ hnd : (test :: (V, E, V) -> V)<a,(e :: E),b>) -> (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>;
// Call the `fun test-fail` operation of the effect `:test`
pub  fun test-fail[11,7,11,15] : forall<a> (expected : std/core/types/string, actual : std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>> ();
// runtime tag for the effect `:test-case`
pub val @tag-test-case[13,1,13,20] : forall<a> (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test-case :: (V, E, V) -> V)<a>>;
// handler for the effect `:test-case`
pub  fun @handle-test-case[13,12,13,20] : forall<a,b,(e :: E),c> (hnd : (test-case :: (V, E, V) -> V)<a,(e :: E),c>, ret : (res : b) -> (e :: E) c, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>|(e :: E)> b) -> (e :: E) c;
// select `test-case-fail` operation out of effect `:test-case`
pub  fun @select-test-case-fail[14,7,14,49] : forall<a,(e :: E),b> (^ hnd : (test-case :: (V, E, V) -> V)<a,(e :: E),b>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>;
// Call the `fun test-case-fail` operation of the effect `:test-case`
pub  fun test-case-fail[14,7,14,20] : forall<a> (test-case : test-case-t) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>> ();
// runtime tag for the effect `:test-suite`
pub val @tag-test-suite[16,1,16,21] : forall<a> (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test-suite :: (V, E, V) -> V)<a>>;
// handler for the effect `:test-suite`
pub  fun @handle-test-suite[16,12,16,21] : forall<a,b,(e :: E),c> (hnd : (test-suite :: (V, E, V) -> V)<a,(e :: E),c>, ret : (res : b) -> (e :: E) c, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>|(e :: E)> b) -> (e :: E) c;
// select `test-suite-fail` operation out of effect `:test-suite`
pub  fun @select-test-suite-fail[17,7,17,83] : forall<a,(e :: E),b> (^ hnd : (test-suite :: (V, E, V) -> V)<a,(e :: E),b>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>;
// Call the `fun test-suite-fail` operation of the effect `:test-suite`
pub  fun test-suite-fail[17,7,17,21] : forall<a> (suite-name : std/core/types/string, expected : std/core/types/string, actual : std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>> ();
pub  fun assert-eq[22,9,22,17] : forall<a,b> (expected : () -> <(std/core/types/div :: X)> a, actual : () -> <(std/core/types/div :: X)> a, ?(==) : (a, a) -> std/core/types/bool, ?show : (a) -> std/core/types/string) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<b>>> ();
pub  fun test[28,9,28,12] : forall<a> (test-name : std/core/types/string, tests : () -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>> ()) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>> ();
pub  fun suite[33,9,33,13] : forall<a> (suite-name : std/core/types/string, test-cases : () -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>> ()) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>> ();
pub  fun run-utest[38,9,38,17] : forall<a> (test-suites : () -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>> ()) -> <(std/core/types/div :: X),(std/core/console/console :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun test/@cfc // inline size: 0
  = forall<a,(e :: E),b> fn(test@0: (test :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (test@0) {
      ((@skip utest/@Hnd-test((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) : (test :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @x;
    });
  };
inline borrow "^"  fun test/@fun-test-fail // inline size: 0
  = forall<a,(e :: E),b> fn(test@0: (test :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (test@0) {
      ((@skip utest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) : (test :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @x;
    });
  };
inline borrow "^"  fun test-case-t/name // inline size: 0
  = fn(@this: test-case-t){
    match (@this) {
      ((@skip utest/Test-case-t((@x: std/core/types/string) : std/core/types/string, (@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string) : test-case-t ) as @pat: test-case-t)
         -> @x;
    };
  };
inline borrow "^"  fun test-case-t/expected // inline size: 0
  = fn(@this: test-case-t){
    match (@this) {
      ((@skip utest/Test-case-t((@pat@0: std/core/types/string) : std/core/types/string, (@x: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string) : test-case-t ) as @pat: test-case-t)
         -> @x;
    };
  };
inline borrow "^"  fun test-case-t/actual // inline size: 0
  = fn(@this: test-case-t){
    match (@this) {
      ((@skip utest/Test-case-t((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@x: std/core/types/string) : std/core/types/string) : test-case-t ) as @pat: test-case-t)
         -> @x;
    };
  };
 fun test-case-t/@copy // inline size: 4
  = fn(@this: test-case-t, name: (std/core/types/@optional :: V -> V)<std/core/types/string>, expected: (std/core/types/@optional :: V -> V)<std/core/types/string>, actual: (std/core/types/@optional :: V -> V)<std/core/types/string>){
    utest/Test-case-t((match (name) {
        ((std/core/types/@Optional((@uniq-name@313: std/core/types/string) : std/core/types/string) : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> @uniq-name@313;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@0: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> (match (@this) {
            ((@skip utest/Test-case-t((@x: std/core/types/string) : std/core/types/string, (@pat@0@0: std/core/types/string) : std/core/types/string, (@pat@1@0: std/core/types/string) : std/core/types/string) : test-case-t ) as @pat@1: test-case-t)
               -> @x;
          });
      }), (match (expected) {
        ((std/core/types/@Optional((@uniq-expected@320: std/core/types/string) : std/core/types/string) : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@1@1: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> @uniq-expected@320;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@2: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> (match (@this) {
            ((@skip utest/Test-case-t((@pat@0@1: std/core/types/string) : std/core/types/string, (@x@0: std/core/types/string) : std/core/types/string, (@pat@1@2: std/core/types/string) : std/core/types/string) : test-case-t ) as @pat@3: test-case-t)
               -> @x@0;
          });
      }), (match (actual) {
        ((std/core/types/@Optional((@uniq-actual@327: std/core/types/string) : std/core/types/string) : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@3@0: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> @uniq-actual@327;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@4: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> (match (@this) {
            ((@skip utest/Test-case-t((@pat@0@2: std/core/types/string) : std/core/types/string, (@pat@1@3: std/core/types/string) : std/core/types/string, (@x@1: std/core/types/string) : std/core/types/string) : test-case-t ) as @pat@5: test-case-t)
               -> @x@1;
          });
      }));
  };
inline borrow "^"  fun test-case/@cfc // inline size: 0
  = forall<a,(e :: E),b> fn(@this: (test-case :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (@this) {
      ((@skip utest/@Hnd-test-case((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) : (test-case :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test-case :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @x;
    });
  };
inline borrow "^"  fun test-case/@fun-test-case-fail // inline size: 0
  = forall<a,(e :: E),b> fn(@this: (test-case :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (@this) {
      ((@skip utest/@Hnd-test-case((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) : (test-case :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test-case :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @x;
    });
  };
inline borrow "^"  fun test-failure/expected // inline size: 0
  = forall<a,b> fn(@this: (test-failure :: (V, V) -> V)<a,b>){
    (match (@this) {
      ((@skip utest/TestFailure((@x: a) : a, (@pat@0: b) : b, (@pat@1: std/core/types/string) : std/core/types/string) : (test-failure :: (V, V) -> V)<a,b> ) as @pat: ((test-failure :: (V, V) -> V)<a,b>))
         -> @x;
    });
  };
inline borrow "^"  fun test-failure/actual // inline size: 0
  = forall<a,b> fn(@this: (test-failure :: (V, V) -> V)<a,b>){
    (match (@this) {
      ((@skip utest/TestFailure((@pat@0: a) : a, (@x: b) : b, (@pat@1: std/core/types/string) : std/core/types/string) : (test-failure :: (V, V) -> V)<a,b> ) as @pat: ((test-failure :: (V, V) -> V)<a,b>))
         -> @x;
    });
  };
inline borrow "^"  fun test-failure/msg // inline size: 0
  = forall<a,b> fn(@this: (test-failure :: (V, V) -> V)<a,b>){
    (match (@this) {
      ((@skip utest/TestFailure((@pat@0: a) : a, (@pat@1: b) : b, (@x: std/core/types/string) : std/core/types/string) : (test-failure :: (V, V) -> V)<a,b> ) as @pat: ((test-failure :: (V, V) -> V)<a,b>))
         -> @x;
    });
  };
 fun test-failure/@copy // inline size: 4
  = forall<a,b> fn(@this: (test-failure :: (V, V) -> V)<a,b>, expected: (std/core/types/@optional :: V -> V)<a>, actual: (std/core/types/@optional :: V -> V)<b>, msg: (std/core/types/@optional :: V -> V)<std/core/types/string>){
    utest/TestFailure<a,b>((match (expected) {
        ((std/core/types/@Optional((@uniq-expected@487: a) : a) : (std/core/types/@optional :: V -> V)<a> ) as @pat: ((std/core/types/@optional :: V -> V)<a>))
           -> @uniq-expected@487;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<a> ) as @pat@0: ((std/core/types/@optional :: V -> V)<a>))
           -> (match (@this) {
            ((@skip utest/TestFailure((@x: a) : a, (@pat@0@0: b) : b, (@pat@1@0: std/core/types/string) : std/core/types/string) : (test-failure :: (V, V) -> V)<a,b> ) as @pat@1: ((test-failure :: (V, V) -> V)<a,b>))
               -> @x;
          });
      }), (match (actual) {
        ((std/core/types/@Optional((@uniq-actual@500: b) : b) : (std/core/types/@optional :: V -> V)<b> ) as @pat@1@1: ((std/core/types/@optional :: V -> V)<b>))
           -> @uniq-actual@500;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<b> ) as @pat@2: ((std/core/types/@optional :: V -> V)<b>))
           -> (match (@this) {
            ((@skip utest/TestFailure((@pat@0@1: a) : a, (@x@0: b) : b, (@pat@1@2: std/core/types/string) : std/core/types/string) : (test-failure :: (V, V) -> V)<a,b> ) as @pat@3: ((test-failure :: (V, V) -> V)<a,b>))
               -> @x@0;
          });
      }), (match (msg) {
        ((std/core/types/@Optional((@uniq-msg@513: std/core/types/string) : std/core/types/string) : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@3@0: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> @uniq-msg@513;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@4: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
           -> (match (@this) {
            ((@skip utest/TestFailure((@pat@0@2: a) : a, (@pat@1@3: b) : b, (@x@1: std/core/types/string) : std/core/types/string) : (test-failure :: (V, V) -> V)<a,b> ) as @pat@5: ((test-failure :: (V, V) -> V)<a,b>))
               -> @x@1;
          });
      }));
  };
inline borrow "^"  fun test-suite/@cfc // inline size: 0
  = forall<a,(e :: E),b> fn(@this: (test-suite :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (@this) {
      ((@skip utest/@Hnd-test-suite((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) : (test-suite :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test-suite :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @x;
    });
  };
inline borrow "^"  fun test-suite/@fun-test-suite-fail // inline size: 0
  = forall<a,(e :: E),b> fn(@this: (test-suite :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (@this) {
      ((@skip utest/@Hnd-test-suite((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) : (test-suite :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test-suite :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-test-fail // inline size: 0
  = forall<a,(e :: E),b> fn(hnd: (test :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (hnd) {
      ((@skip utest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-fail: (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<std/core/types/string,std/core/types/string,(),(test :: (V, E, V) -> V)<a>,(e :: E),b>) : (test :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @fun-test-fail;
    });
  };
inline  fun test-fail // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>>>(expected: std/core/types/string, actual: std/core/types/string){
    std/core/hnd/@perform2<std/core/types/string,std/core/types/string,(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>>,(test :: (V, E, V) -> V)<_b>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (V, E, V) -> V)<_b>>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (V, E, V) -> V)<_b>>>((std/core/hnd/@evv-at<(test :: (V, E, V) -> V)<_b>>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (V, E, V) -> V)<a>>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e :: E),b> utest/@select-test-fail<_c,(e :: E),b>), expected, actual);
  };
inline borrow "^"  fun @select-test-case-fail // inline size: 0
  = forall<a,(e :: E),b> fn(hnd: (test-case :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (hnd) {
      ((@skip utest/@Hnd-test-case((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-case-fail: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<test-case-t,(),(test-case :: (V, E, V) -> V)<a>,(e :: E),b>) : (test-case :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test-case :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @fun-test-case-fail;
    });
  };
inline  fun test-case-fail // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>>>(test-case: test-case-t){
    std/core/hnd/@perform1<test-case-t,(),(test-case :: (V, E, V) -> V)<_b>,<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-case :: (V, E, V) -> V)<_b>>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-case :: (V, E, V) -> V)<_b>>>((std/core/hnd/@evv-at<(test-case :: (V, E, V) -> V)<_b>>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-case :: (V, E, V) -> V)<a>>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e :: E),b> utest/@select-test-case-fail<_c,(e :: E),b>), test-case);
  };
inline borrow "^"  fun @select-test-suite-fail // inline size: 0
  = forall<a,(e :: E),b> fn(hnd: (test-suite :: (V, E, V) -> V)<a,(e :: E),b>){
    (match (hnd) {
      ((@skip utest/@Hnd-test-suite((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-suite-fail: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(std/core/types/string, std/core/types/string, std/core/types/string),(),(test-suite :: (V, E, V) -> V)<a>,(e :: E),b>) : (test-suite :: (V, E, V) -> V)<a,(e :: E),b> ) as @pat: ((test-suite :: (V, E, V) -> V)<a,(e :: E),b>))
         -> @fun-test-suite-fail;
    });
  };
inline  fun test-suite-fail // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>>>(suite-name: std/core/types/string, expected: std/core/types/string, actual: std/core/types/string){
    std/core/hnd/@perform3<std/core/types/string,std/core/types/string,std/core/types/string,(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>>,(test-suite :: (V, E, V) -> V)<_b>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-suite :: (V, E, V) -> V)<_b>>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test-suite :: (V, E, V) -> V)<_b>>>((std/core/hnd/@evv-at<(test-suite :: (V, E, V) -> V)<_b>>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test-suite :: (V, E, V) -> V)<a>>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e :: E),b> utest/@select-test-suite-fail<_c,(e :: E),b>), suite-name, expected, actual);
  };