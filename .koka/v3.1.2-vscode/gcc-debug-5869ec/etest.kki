module interface etest
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/core/list = std/core/list = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// fun test-append
// ```
pub recursive effect type test[25,1,25,15] <(e :: E),(e1 :: E),a> :: (E, E, V) -> V {
  pub con @Hnd-test[25,1,25,15](@cfc: std/core/types/int, @fun-test-append: forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) b, () -> (e :: E) b, (b, b) -> std/core/types/bool, (b) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>){0,2,8} : forall<(e :: E),(e1 :: E),a> (std/core/types/int, forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) b, () -> (e :: E) b, (b, b) -> std/core/types/bool, (b) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>) -> (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:test` type.
 fun test/@cfc[25,1,25,15] : forall<(e :: E),(e1 :: E),a> (^ test : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-test-append` constructor field of the `:test` type.
 fun test/@fun-test-append[26,7,26,88] : forall<(e :: E),(e1 :: E),a,b> (^ test : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) b, () -> (e :: E) b, (b, b) -> std/core/types/bool, (b) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>;
// runtime tag for the effect `:test`
pub val @tag-test[25,1,25,15] : forall<(e :: E)> (std/core/hnd/htag :: ((E, V) -> V) -> V)<(test :: (E, E, V) -> V)<(e :: E)>>;
// handler for the effect `:test`
pub  fun @handle-test[25,12,25,15] : forall<(e :: E),a,(e1 :: E),b> (hnd : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),b>, ret : (res : a) -> (e1 :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>|(e1 :: E)> a) -> (e1 :: E) b;
// select `test-append` operation out of effect `:test`
pub  fun @select-test-append[26,7,26,88] : forall<(e :: E),a,(e1 :: E),b> (^ hnd : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),b>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) a, () -> (e :: E) a, (a, a) -> std/core/types/bool, (a) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),b>;
// Call the `fun test-append` operation of the effect `:test`
pub  fun test-append[26,7,26,17] : forall<(e :: E),a> (f : () -> (e :: E) a, g : () -> (e :: E) a, eq : (a, a) -> std/core/types/bool, show : (a) -> std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> ();
pub  fun assert-eq[28,9,28,17] : forall<a,(e :: E)> (f : () -> (e :: E) a, g : () -> (e :: E) a, ?(==) : (a, a) -> std/core/types/bool, ?show : (a) -> std/core/types/string) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> ();
pub  fun run-test[31,9,31,16] : (tests : forall<(e :: E)> () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> ()) -> <(std/core/console/console :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun test/@cfc // inline size: 0
  = forall<(e :: E),(e1 :: E),a> fn(test: (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (test) {
      ((@skip etest/@Hnd-test((@x: std/core/types/int) : std/core/types/int, (@pat@0: (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) b, () -> (e :: E) b, (b, b) -> std/core/types/bool, (b) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>)) : (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) b, () -> (e :: E) b, (b, b) -> std/core/types/bool, (b) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>)) : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun test/@fun-test-append // inline size: 0
  = forall<(e :: E),(e1 :: E),a,b> fn(test: (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>){
    (match (test) {
      ((@skip etest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@x: (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) c, () -> (e :: E) c, (c, c) -> std/core/types/bool, (c) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>)) : (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) c, () -> (e :: E) c, (c, c) -> std/core/types/bool, (c) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),a>)) : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a> ) as @pat: ((test :: (E, E, V) -> V)<(e :: E),(e1 :: E),a>))
         -> @x<b>;
    });
  };
inline borrow "^"  fun @select-test-append // inline size: 0
  = forall<(e :: E),a,(e1 :: E),b> fn(hnd: (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),b>){
    (match (hnd) {
      ((@skip etest/@Hnd-test((@pat@0: std/core/types/int) : std/core/types/int, (@fun-test-append: (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) c, () -> (e :: E) c, (c, c) -> std/core/types/bool, (c) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),b>)) : (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(() -> (e :: E) c, () -> (e :: E) c, (c, c) -> std/core/types/bool, (c) -> std/core/types/string),(),(test :: (E, E, V) -> V)<(e :: E)>,(e1 :: E),b>)) : (test :: (E, E, V) -> V)<(e :: E),(e1 :: E),b> ) as @pat: ((test :: (E, E, V) -> V)<(e :: E),(e1 :: E),b>))
         -> @fun-test-append<a>;
    });
  };
inline  fun test-append // inline size: 5
  = forall<(e :: E),a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>>(f: () -> (e :: E) a, g: () -> (e :: E) a, eq: (a, a) -> std/core/types/bool, show: (a) -> std/core/types/string){
    std/core/hnd/@perform4<() -> (e :: E) a,() -> (e :: E) a,(a, a) -> std/core/types/bool,(a) -> std/core/types/string,(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>,(test :: (E, E, V) -> V)<(e :: E)>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (E, E, V) -> V)<(e :: E)>>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(test :: (E, E, V) -> V)<(e :: E)>>>((std/core/hnd/@evv-at<(test :: (E, E, V) -> V)<(e :: E)>>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(test :: (E, E, V) -> V)<(e :: E)>>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e1 :: E),b> etest/@select-test-append<(e :: E),a,(e1 :: E),b>), f, g, eq, show);
  };